{"version":3,"sources":["components/Chart.tsx","components/ErrorNotification.tsx","App.tsx","api/DataAPI.tsx","index.tsx"],"names":["Chart","options","chart","type","title","text","subtitle","plotOptions","series","marker","enabled","yAxis","xAxis","labels","name","data","highcharts","Highcharts","ErrorNotification","message","className","id","App","useState","setData","setMessage","React","useEffect","console","log","setError","axios","get","then","response","catch","error","JSON","stringify","DataAPI","undefined","ReactDOM","render","document","getElementById"],"mappings":"qQAsDeA,EA9CgB,SAAC,GAAe,IAGvCC,EAAU,CACdC,MAAO,CACLC,KAAM,QAERC,MAAO,CACLC,KAAM,cAERC,SAAU,CACRD,KAAM,4BAERE,YAAa,CACXC,OAAQ,CACNC,OAAQ,CACNC,SAAS,KAIfC,MAAO,CACLP,MAAO,CACLC,KAAM,cAGVO,MAAO,CACLC,OAAQ,CACNH,SAAS,IAGbF,OAAQ,CACN,CACEM,KAAM,YACNC,KAjCsC,EAAZA,QAuChC,OACE,kBAAC,IAAD,CAAiBC,WAAYC,IAAYhB,QAASA,KCjCvCiB,EAR4B,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5C,OACE,yBAAKC,UAAU,UAAUC,GAAG,WACzBF,ICuCQG,EAzCO,WAAO,IAAD,EACAC,qBADA,mBAClBR,EADkB,KACZS,EADY,OAEMD,mBAAwB,MAF9B,mBAElBJ,EAFkB,KAETM,EAFS,KAY1B,OANAC,IAAMC,WAAU,WACdC,QAAQC,IAAI,UCXM,SAACL,EAA4CM,GAI1DC,IACJC,IAHa,aAKbC,MAAK,SAAAC,GAAQ,OAEZV,EAAQU,EAASnB,SAElBoB,OAAM,SAAAC,GAELN,EAASO,KAAKC,UAAUF,EAAMF,SAASnB,KAAKqB,QAC5CR,QAAQC,IAAIO,MDFdG,CAAef,EAASC,KACvB,SAGUe,IAATzB,EAIA,6BACGI,EACC,kBAAC,EAAD,CAAmBA,QAASA,IAE5B,kBAAC,EAAD,CAAOJ,KAAMA,KAQjB,6BACGI,EACC,kBAAC,EAAD,CAAmBA,QAASA,IA3Bf,e,MENvBsB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.8e41a379.chunk.js","sourcesContent":["import React from 'react';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\ninterface Props {\r\n  data: Array<[string, number]>;\r\n}\r\n\r\nconst Chart: React.FC<Props> = ({ data })  => {\r\n\r\n  // Highchart chart setup options\r\n  const options = {\r\n    chart: {\r\n      type: 'line'\r\n    },\r\n    title: {\r\n      text: 'Apple Inc.'\r\n    },\r\n    subtitle: {\r\n      text: '(NASDAQ: AAPL): 100 days'\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        marker: {\r\n          enabled: false\r\n        }\r\n      }\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: 'Price USD',\r\n      },\r\n    },\r\n    xAxis: {\r\n      labels: {\r\n        enabled: false\r\n      },\r\n    },\r\n    series: [\r\n      { \r\n        name: 'Price USD',\r\n        data: data\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Return highchart chart\r\n  return (\r\n    <HighchartsReact highcharts={Highcharts} options={options} />\r\n  );\r\n\r\n};\r\n\r\n\r\nexport default Chart;","import React from 'react';\r\n\r\ninterface Props {\r\n  message: string;\r\n}\r\n\r\n// Displaying possible error or other message\r\nconst ErrorNotification: React.FC<Props> = ({ message }) => {\r\n  return (\r\n    <div className=\"message\" id=\"message\">\r\n      {message}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ErrorNotification;","import React, { useState } from 'react';\n\n// Import components\nimport * as DataAPI from './api/DataAPI'\nimport Chart from \"./components/Chart\";\nimport ErrorNotification from \"./components/ErrorNotification\";\n\n\nconst App: React.FC = () => {\n  const [ data, setData ] = useState<Array<[string, number]>>();\n  const [ message, setMessage ] = useState<string | null>(null);\n  const text: string = \"Loading...\";\n\n  // Perform GET request to backend after render\n  React.useEffect(() => {\n    console.log('effect');\n    DataAPI.onData(setData, setMessage);\n  }, []);\n\n  // If 'data' is not undefined return chart\n  if (data !== undefined) {\n\n    // Return chart or error message\n    return (\n      <div>\n        {message ? (\n          <ErrorNotification message={message} />\n        ) : (\n          <Chart data={data} />\n        )}\n      </div>\n    );\n\n  // If 'data' is undefined return \"Loading...\" or error message\n  } else {\n    return  (\n      <div>\n        {message ? (\n          <ErrorNotification message={message} />\n        ) : (\n          text\n        )}\n      </div>\n    );\n  }\n\n};\n\n\nexport default App;","import { Dispatch } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const onData = (setData: Dispatch<Array<[string, number]>>, setError: Dispatch<string>) => {\r\n  // Backend url\r\n  const baseUrl = '/api/data';\r\n  // GET request to backend\r\n  return axios\r\n    .get<Array<[string, number]>>(baseUrl)\r\n    // Handle success\r\n    .then(response =>\r\n      // Add response data to 'data'\r\n      setData(response.data))\r\n    // Handle error\r\n    .catch(error => {\r\n      // Add error response data to 'message'\r\n      setError(JSON.stringify(error.response.data.error) as string)\r\n      console.log(error)\r\n    });\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}