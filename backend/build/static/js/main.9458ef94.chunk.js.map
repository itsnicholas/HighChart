{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","stocks","setStocks","useEffect","console","log","axios","get","then","response","data","catch","error","undefined","dates","Object","keys","reverse","prices","values","map","x","Number","i","Date","push","options","chart","type","title","text","subtitle","plotOptions","series","marker","enabled","yAxis","xAxis","labels","name","highcharts","Highcharts","ReactDOM","render","document","getElementById"],"mappings":"iPA6HeA,EAlHO,WAAO,IAAD,EACEC,qBADF,mBACnBC,EADmB,KACXC,EADW,KAsB1B,GAlBAC,qBAAU,WACRC,QAAQC,IAAI,UACZC,IACGC,IATS,aAUTC,MAAK,SAAAC,GAEJL,QAAQC,IAAI,qBACZD,QAAQC,IAAII,EAASC,KAAM,iBAE3BR,EAAUO,EAASC,SAEpBC,OAAM,SAAAC,GAELR,QAAQC,IAAIO,QAEf,SAGYC,IAAXZ,EAAsB,CA0BxB,IAvBA,IAAMa,EACJC,OACGC,KAAKf,EAAO,wBACZgB,UAICC,EACJH,OACGI,OAAOlB,EAAO,wBACdgB,UACAG,KAAI,SAAAC,GAAC,OAAIA,EAAE,eACXD,IAAIE,QAGLZ,EAA+B,GAQ1Ba,EAAI,EAAGA,EAAI,IAAKA,IAGnB,IAAIC,KAAKV,EAAMS,IAAM,IAAIC,KAAK,gBAChCN,EAAOK,GAAKL,EAAOK,GAAG,GAIxBb,EAAKe,KAAK,CAACX,EAAMS,GAAIL,EAAOK,KAG9BnB,QAAQC,IAAIS,EAAO,oBACnBV,QAAQC,IAAIa,EAAQ,mBACpBd,QAAQC,IAAIK,EAAM,mBAGlB,IAAMgB,EAAU,CACdC,MAAO,CACLC,KAAM,QAERC,MAAO,CACLC,KAAM,cAERC,SAAU,CACRD,KAAM,4BAERE,YAAa,CACXC,OAAQ,CACNC,OAAQ,CACNC,SAAS,KAIfC,MAAO,CACLP,MAAO,CACLC,KAAM,cAGVO,MAAO,CACLC,OAAQ,CACNH,SAAS,IAGbF,OAAQ,CACN,CACEM,KAAM,YACN7B,KAAMA,KAMZ,OACE,6BACE,kBAAC,IAAD,CAAiB8B,WAAYC,IAAYf,QAASA,KAMtD,OAAO,MCnHXgB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.9458ef94.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\n// Import types\nimport { TimeSeriesResponseFormat } from \"./types\";\n\n// Backend url\nconst baseUrl = '/api/data';\n\nconst App: React.FC = () => {\n  const [stocks, setStocks] = useState<TimeSeriesResponseFormat>();\n\n  // Perform GET request to backend after render\n  useEffect(() => {\n    console.log('effect');\n    axios\n      .get<TimeSeriesResponseFormat>(baseUrl)\n      .then(response => {\n        // Handle success\n        console.log('promise fulfilled');\n        console.log(response.data, 'response.data');\n        // Add response data to 'stocks'\n        setStocks(response.data);\n      })\n      .catch(error => {\n        // Handle error\n        console.log(error);\n      });\n  }, []);\n\n  // If 'stocks' is not undefined return chart\n  if (stocks !== undefined) {\n\n    // Reversed array of object's own enumerable property names\n    const dates: string[] = \n      Object\n        .keys(stocks[\"Time Series (Daily)\"])\n        .reverse();\n\n    // Reversed array of object's own enumerable property values\n    // populated by \"4. close\" element as Number data type\n    const prices: number[] = \n      Object\n        .values(stocks[\"Time Series (Daily)\"])\n        .reverse()\n        .map(x => x[\"4. close\"])\n        .map(Number);\n    \n    // Create empty array to supply chart data to  \n    var data: Array<[string, number]>= [];\n\n    /**\n     * For-loop: combine arrays into a suitable form for\n     * Highchart and take in account AAPL stock split on \n     * a 4-for-1 basis on August 28, 2020\n    */\n    // Loop through all (100) entries of 'dates' and 'prices'\n    for (var i = 0; i < 100; i++) {\n\n      // Change prices before stock split by comparing dates\n      if (new Date(dates[i]) < new Date('2020-08-29')) {\n        prices[i] = prices[i]/4;\n      }\n\n      // Push suitable format to data array\n      data.push([dates[i], prices[i]]);\n    } \n\n    console.log(dates, 'dates in App.tsx');\n    console.log(prices, 'info in App.tsx');\n    console.log(data, 'data in App.tsx');\n\n    // Highchart chart setup options\n    const options = {\n      chart: {\n        type: 'line'\n      },\n      title: {\n        text: 'Apple Inc.'\n      },\n      subtitle: {\n        text: '(NASDAQ: AAPL): 100 days'\n      },\n      plotOptions: {\n        series: {\n          marker: {\n            enabled: false\n          }\n        }\n      },\n      yAxis: {\n        title: {\n          text: 'Price USD',\n        },\n      },\n      xAxis: {\n        labels: {\n          enabled: false\n        },\n      },\n      series: [\n        { \n          name: 'Price USD',\n          data: data\n        }\n      ]\n    };\n\n    // Return highchart chart\n    return (\n      <div>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </div>\n    );\n\n    // If 'stocks' is undefined return null\n  } else {\n    return null;\n  }\n\n};\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}